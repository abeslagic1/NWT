package com.etf.controller;

import com.etf.dao.SobaDAO;
import com.etf.model.Soba;
import com.etf.repository.SobaRepository;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Validated
@RestController
@RequestMapping(path = "/Soba")
public class SobaController {

    @Autowired
    // This means to get the bean called userRepository
    //Which is auto-generated by Spring, we will use it to handle the data
    private SobaRepository sobaRepository;

    @PostMapping(path = "/")
    ResponseEntity <String> addNewSoba(@RequestBody @Valid SobaDAO sobaDAO){

        Soba s = new Soba();

        s.setNazivSobe(sobaDAO.getNazivSobe());
        s.setZauzetost(sobaDAO.getZauzetost());
        s.setPrivateShared(sobaDAO.getPrivateShared());

        sobaRepository.save(s);
        return ResponseEntity.ok("Room has been added.");
    }

    @GetMapping(path = "/")
    public @ResponseBody Iterable<Soba> getAllSobe(){
        // This returns a JSON or XML with the users
        return sobaRepository.findAll();
    }

    @GetMapping(path = "/GetByNazivSobe/{nazivSobe}")
    public @ResponseBody Optional<Soba> getSobaByNazivSobe(@PathVariable("nazivSobe") String nazivSobe){
        return sobaRepository.findByNazivSobe(nazivSobe);
    }

    @GetMapping(path = "/GetById/{id}")
    public @ResponseBody Optional<Soba> getSobaById(@PathVariable("id") Integer id){
        return sobaRepository.findById(id);
    }

    @ResponseStatus(HttpStatus.BAD_REQUEST)
    @ExceptionHandler(MethodArgumentNotValidException.class)

    public Map<String, String> handleValidationExceptions(MethodArgumentNotValidException ex) {

        Map<String, String> errors = new HashMap<>();

        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return errors;
    }
}
